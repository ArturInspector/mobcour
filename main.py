import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command, StateFilter
from database import Database
import re
from datetime import datetime
from dotenv import load_dotenv
from typing import Dict, Any
from handlers import error_handler, unknown_command, handle_text
from ai_advice import AIAdviceHandler

# –í–µ—Ä—Å–∏—è 1.0.1, –±–∞–∑–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_user_sessions, –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏,
# –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å calculate_user_statistics.

# 1 PART OF BOT (Initialization)
# Logging settings.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot initialization (lol)
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

# Global errors handler registration. Alright
dp.errors.register(error_handler)

# FSM states
class SessionStates(StatesGroup):
    waiting_for_session_data = State()
    waiting_for_advice_topic = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_advice_question = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# AI Advice Handler class in this file.
advice_handler = AIAdviceHandler()

# Services dictionary.
service_names = {
    "yandex_express": "–Ø–Ω–¥–µ–∫—Å –≠–∫—Å–ø—Ä–µ—Å—Å",
    "yandex_food": "–Ø–Ω–¥–µ–∫—Å –ï–¥–∞",
    "glovo": "–ì–ª–æ–≤–æ"
}


# 2 PART OF BOT (Handlers)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext = None):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_or_create_user(message.from_user.id, message.from_user.username)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É", callback_data="add_session"),
                InlineKeyboardButton(text="üí° –ò–ò —Å–æ–≤–µ—Ç—ã", callback_data="ai_advice")
            ]
        ])
        
        sent_message = await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ state –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if state:
            await state.update_data(menu_message_id=sent_message.message_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        stats = db.get_user_statistics(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if not stats:
            await callback.message.edit_text(
                "üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                parse_mode="Markdown"
            )
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        def safe_get(key: str, default: Any = 0) -> Any:
            value = stats.get(key)
            return default if value is None else value
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        total_shifts = safe_get('total_shifts')
        total_earnings = safe_get('total_earnings')
        total_orders = safe_get('total_orders')
        avg_earnings = safe_get('avg_earnings')
        avg_orders = safe_get('avg_orders')
        max_earnings = safe_get('max_earnings')
        min_earnings = safe_get('min_earnings')
        total_hours = safe_get('total_hours')
        avg_shift_duration = safe_get('avg_shift_duration')
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ earnings_per_hour —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–æ–ª—å
        earnings_per_hour = 0
        if total_hours > 0:
            earnings_per_hour = total_earnings / total_hours
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ {callback.from_user.first_name}*\n\n"
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º–µ–Ω—ã
        if total_shifts > 0:
            profile_text += (
                f"üìä *–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"‚Ä¢ üî¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {total_shifts}\n"
                f"‚Ä¢ üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earnings}–°\n"
                f"‚Ä¢ üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
                
                f"‚è± *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
                f"‚Ä¢ üïí –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours:.1f} —á\n"
                f"‚Ä¢ ‚è≥ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã: {avg_shift_duration:.1f} —á\n"
                f"‚Ä¢ üí∏ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å: {earnings_per_hour:.0f}—Å\n\n"
                
                f"üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                f"‚Ä¢ üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–º–µ–Ω—É: {avg_earnings:.0f}—Å\n"
                f"‚Ä¢ üìä –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–º–µ–Ω—É: {avg_orders:.1f}\n"
                f"‚Ä¢ üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {max_earnings}—Å\n"
                f"‚Ä¢ üîª –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {min_earnings}—Å\n"
            )
        else:
            profile_text += (
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ])
        
        await callback.message.edit_text(profile_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã
@dp.callback_query(F.data == "add_session")
async def add_session(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(SessionStates.waiting_for_session_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
        await state.update_data(menu_message_id=callback.message.message_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ])
        
        await callback.message.edit_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "05.02.2007 (–¥–∞—Ç–∞)\n"
            "16:40 (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)\n"
            "18:21 (–≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)\n"
            "2 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤)\n"
            "454 (–∑–∞—Ä–∞–±–æ—Ç–æ–∫)",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã
@dp.message(SessionStates.waiting_for_session_data)
async def process_session_data(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω—é
        state_data = await state.get_data()
        menu_message_id = state_data.get('menu_message_id')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ—Ç–æ–º
        processing_msg = await message.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = message.text.strip().split('\n')
        if len(lines) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        date_str = lines[0].strip()
        start_time_str = lines[1].strip()
        end_time_str = lines[2].strip()
        orders = int(lines[3].strip())
        earnings = float(lines[4].strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if not re.match(r'\d{2}\.\d{2}\.\d{4}', date_str):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'\d{2}:\d{2}', start_time_str) or not re.match(r'\d{2}:\d{2}', end_time_str):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        if orders <= 0 or orders > 25:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏ –º–µ–Ω—å—à–µ 25.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–º–µ–Ω—É
        if orders > 25 or earnings >= 6000:
            raise ValueError("–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏! –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            start_dt = datetime.strptime(f"{date_str} {start_time_str}", "%d.%m.%Y %H:%M")
            end_dt = datetime.strptime(f"{date_str} {end_time_str}", "%d.%m.%Y %H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            current_dt = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ 2022)
            if start_dt.year < 2022:
                raise ValueError("–ì–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 2022")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—Ü–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12)
            if not 1 <= start_dt.month <= 12:
                raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if start_dt > current_dt or end_dt > current_dt:
                raise ValueError("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            if end_dt <= start_dt:
                raise ValueError("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö
            total_hours = (end_dt - start_dt).total_seconds() / 3600
            if total_hours <= 0:
                raise ValueError("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                
        except ValueError as e:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è: {str(e)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        current_service_key = db.get_user_service(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not current_service_key:
            current_service_key = "yandex_food"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        current_service = service_names.get(current_service_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É —Å –ø–æ–ª–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        session_id = db.add_session(
            message.from_user.id,
            "delivery",
            start_dt.strftime('%Y-%m-%d %H:%M:%S')
        )
        
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É", callback_data="add_session"),
                InlineKeyboardButton(text="üí° –ò–ò —Å–æ–≤–µ—Ç—ã", callback_data="ai_advice")
            ]
        ])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if session_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            db.update_session(
                session_id, 
                earnings=earnings, 
                order_count=orders, 
                start_time=start_dt.strftime('%Y-%m-%d %H:%M:%S'),
                end_time=end_dt.strftime('%Y-%m-%d %H:%M:%S'),
                service=current_service_key
            )
            
            success_text = (
                "‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                f"üïí –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n"
                f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings}—Å\n\n"
                f"üïí –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours:.1f} —á\n\n"
                f"üöö –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: {current_service}\n\n"
                "üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await message.answer(success_text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_msg.delete()
        
    except ValueError as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="add_session")]
        ])
        
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await message.answer(error_text, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –í —Å–ª—É—á–∞–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                             reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    try:
        if state is not None:
            await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É", callback_data="add_session"),
                InlineKeyboardButton(text="üí° –ò–ò —Å–æ–≤–µ—Ç—ã", callback_data="ai_advice")
            ]
        ])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üëã! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (–ø–æ—Ç–æ–º—É —á—Ç–æ –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –¥–µ–ª–∞—Ç—å)\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ)\n"
        "/service - –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ø–Ω–¥–µ–∫—Å –≠–∫—Å–ø—Ä–µ—Å—Å, –Ω–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç, –º–æ–∂–µ—Ç, –≤–∞–º –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ)\n"
        "–ò –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é (–ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º —Å–∫—É—á–µ–Ω –¥–ª—è –≤–∞—Å).\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ–∫–∞ –≤—ã –Ω–µ —Å—Ç–∞–Ω–µ—Ç–µ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ä–∞–±–æ–º.\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò —Å–æ–≤–µ—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞! –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—É–¥—å—Ç–µ –Ω–æ—Ä–º–∏—Å–æ–º.\n"
        "–°–∫–∞–∂–µ–º –Ω–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ä–∞–±—Å—Ç–≤—É –Ø–Ω–¥–µ–∫—Å–∞! (–∏–ª–∏ –¥–∞) –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å —Ç–æ–∂–µ –µ—Å—Ç—å –±–æ—Ç."
    )
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /service
@dp.message(Command("service"))
async def cmd_service(message: Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    service_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–Ø–Ω–¥–µ–∫—Å –≠–∫—Å–ø—Ä–µ—Å—Å", callback_data="service_yandex_express"),
            InlineKeyboardButton(text="–Ø–Ω–¥–µ–∫—Å –ï–¥–∞", callback_data="service_yandex_food")
        ],
        [
            InlineKeyboardButton(text="–ì–ª–æ–≤–æ", callback_data="service_glovo"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await message.answer(
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=service_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
@dp.callback_query(F.data.startswith("service_"))
async def handle_service_selection(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–∑ callback_data
        service_map = {
            "service_yandex_express": ("–Ø–Ω–¥–µ–∫—Å –≠–∫—Å–ø—Ä–µ—Å—Å", "yandex_express"),
            "service_yandex_food": ("–Ø–Ω–¥–µ–∫—Å –ï–¥–∞", "yandex_food"),
            "service_glovo": ("–ì–ª–æ–≤–æ", "glovo")
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –µ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        selected_service_info = service_map.get(callback.data)
        if not selected_service_info:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        
        selected_service_name, selected_service_key = selected_service_info
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = callback.from_user.id
        db.update_user_service(user_id, selected_service_key)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_service_name}"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await back_to_main(callback, None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await back_to_main(callback, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(Command("settings"))
async def unknown_cmd_handler(message: Message):
    await unknown_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message()
async def text_message_handler(message: Message):
    await handle_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–ò —Å–æ–≤–µ—Ç—ã"
@dp.callback_query(F.data == "ai_advice")
async def ai_advice_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SessionStates.waiting_for_advice_topic)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º
    topics_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öñ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="legal"),
            InlineKeyboardButton(text="üçé –ü–∏—Ç–∞–Ω–∏–µ, –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="nutrition"),
            InlineKeyboardButton(text="üö≤ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="vehicle"),
            InlineKeyboardButton(text="üí° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", callback_data="optimization")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ò–ò —Å–æ–≤–µ—Ç–æ–≤:", reply_markup=topics_keyboard)

@dp.callback_query(F.data.in_({"legal", "nutrition", "vehicle", "optimization"}))
async def handle_advice_topic(callback: types.CallbackQuery, state: FSMContext):
    selected_topic = callback.data
    await state.update_data(selected_topic=selected_topic)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    
    await state.set_state(SessionStates.waiting_for_advice_question)
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ:")

@dp.message(SessionStates.waiting_for_advice_question)
async def process_advice_question(message: Message, state: FSMContext):
    user_data = await state.get_data()
    selected_topic = user_data.get('selected_topic')

    if selected_topic is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {selected_topic}")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ai_advice.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    response = await advice_handler.get_advice(message.text, selected_topic)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç AI: {response}")

    await message.answer(response)
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

def calculate_user_statistics(user_id):
    sessions = db.get_user_sessions(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_hours = 0
    total_earnings = 0
    total_orders = 0

    for session in sessions:
        if session['start_time'] and session['end_time']:
            start_dt = datetime.strptime(session['start_time'], '%Y-%m-%d %H:%M:%S')
            end_dt = datetime.strptime(session['end_time'], '%Y-%m-%d %H:%M:%S')
            session_hours = (end_dt - start_dt).total_seconds() / 3600
            total_hours += session_hours
        total_earnings += session['earnings']
        total_orders += session['order_count']

    avg_shift_duration = total_hours / len(sessions) if sessions else 0
    avg_earnings_per_hour = total_earnings / total_hours if total_hours > 0 else 0

    return {
        'total_shifts': len(sessions),
        'total_hours': round(total_hours, 2),
        'total_earnings': total_earnings,
        'total_orders': total_orders,
        'avg_shift_duration': round(avg_shift_duration, 2),
        'avg_earnings_per_hour': round(avg_earnings_per_hour, 2)
    }

async def main():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
