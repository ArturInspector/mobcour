from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from datetime import datetime
import logging
import re
from database import Database
from .states import SessionStates
from keyboards.inline import get_main_menu_keyboard, get_back_keyboard

# Courier session handler.
router = Router()
logger = logging.getLogger(__name__)
db = Database()

# Services dictionary
service_names = {
    "yandex_express": "–Ø–Ω–¥–µ–∫—Å –≠–∫—Å–ø—Ä–µ—Å—Å",
    "yandex_food": "–Ø–Ω–¥–µ–∫—Å –ï–¥–∞",
    "glovo": "–ì–ª–æ–≤–æ"
}

@router.message(SessionStates.waiting_for_session_data)
async def process_session_data(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω—é
        state_data = await state.get_data()
        menu_message_id = state_data.get('menu_message_id')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ—Ç–æ–º
        processing_msg = await message.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = message.text.strip().split('\n')
        if len(lines) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        date_str = lines[0].strip()
        start_time_str = lines[1].strip()
        end_time_str = lines[2].strip()
        orders = int(lines[3].strip())
        earnings = float(lines[4].strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if not re.match(r'\d{2}\.\d{2}\.\d{4}', date_str):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'\d{2}:\d{2}', start_time_str) or not re.match(r'\d{2}:\d{2}', end_time_str):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        if orders <= 0 or orders > 25:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏ –º–µ–Ω—å—à–µ 25.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–º–µ–Ω—É
        if orders > 25 or earnings >= 6000:
            raise ValueError("–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏! –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            start_dt = datetime.strptime(f"{date_str} {start_time_str}", "%d.%m.%Y %H:%M")
            end_dt = datetime.strptime(f"{date_str} {end_time_str}", "%d.%m.%Y %H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            current_dt = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ 2022)
            if start_dt.year < 2022:
                raise ValueError("–ì–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 2022")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—Ü–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12)
            if not 1 <= start_dt.month <= 12:
                raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if start_dt > current_dt or end_dt > current_dt:
                raise ValueError("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            if end_dt <= start_dt:
                raise ValueError("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö
            total_hours = (end_dt - start_dt).total_seconds() / 3600
            if total_hours <= 0:
                raise ValueError("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                
        except ValueError as e:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è: {str(e)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        current_service_key = db.get_user_service(user_id)

        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not current_service_key:
            current_service_key = "yandex_food"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        current_service = service_names.get(current_service_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É —Å –ø–æ–ª–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        session_id = db.add_session(
            message.from_user.id,
            "delivery",
            start_dt.strftime('%Y-%m-%d %H:%M:%S')
        )
        
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = get_main_menu_keyboard()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if session_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            db.update_session(
                session_id, 
                earnings=earnings, 
                order_count=orders, 
                start_time=start_dt.strftime('%Y-%m-%d %H:%M:%S'),
                end_time=end_dt.strftime('%Y-%m-%d %H:%M:%S'),
                service=current_service_key
            )
            
            success_text = (
                "‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                f"üïí –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n"
                f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings}—Å\n\n"
                f"üïí –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours:.1f} —á\n\n"
                f"üöö –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: {current_service}\n\n"
                "üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await message.answer(success_text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_msg.delete()
        
    except ValueError as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        back_keyboard = get_back_keyboard()
        
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await message.answer(error_text, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –í —Å–ª—É—á–∞–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        back_keyboard = get_back_keyboard()
        
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                             reply_markup=back_keyboard)