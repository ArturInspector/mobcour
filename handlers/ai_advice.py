import requests
import logging
from dotenv import load_dotenv
import os
import random
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_ai_advice_topics_keyboard, get_back_keyboard
from database import Database

# Full AI advice callbacks and functional (request in class)
load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router()
db = Database()

class AIAdviceStates(StatesGroup):
    waiting_for_advice_question = State()

# Main prompt and answer.
class AIAdviceHandler:
    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompts = [
            "–¢—ã - –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ç–≥ –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –∫—É—Ä—å–µ—Ä–∞–º –≤ –ë–∏—à–∫–µ–∫–µ. –ü–æ–º–æ–≥–∏ —é–∑–µ—Ä—É –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω –ø—Ä–æ—Å–∏—Ç –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏ –¥–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –∫—É—Ä—å–µ—Ä—Å—Ç–≤–µ, –≤–µ—Ä–Ω–∏: '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å—Ç–≤–∞.' –û—Ç–≤–µ—á–∞–π –ù–ï –ë–û–õ–ï–ï 1000-1200 —Å–∏–º–≤–æ–ª–æ–≤! Prompt:",
            "–¢—ã - –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ç–≥ –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –∫—É—Ä—å–µ—Ä–∞–º –≤ –ë–∏—à–∫–µ–∫–µ. –¢—ã —é—Ä–∏—Å—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –ü–î–î –ö–†, –ø–∞—Ç–µ–Ω—Ç–µ –ö–† –∏ –ø—Ä–æ—á–µ–º. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –∫—É—Ä—å–µ—Ä—Å—Ç–≤–µ, –≤–µ—Ä–Ω–∏: '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å—Ç–≤–∞.' –û—Ç–≤–µ—á–∞–π –ù–ï –ë–û–õ–ï–ï 1000-1200 —Å–∏–º–≤–æ–ª–æ–≤! Prompt:",
            "–¢—ã - –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ç–≥ –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –∫—É—Ä—å–µ—Ä–∞–º –≤ –ë–∏—à–∫–µ–∫–µ. –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –ø–∏—Ç–∞–Ω–∏—é, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Ñ–∞–∫—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∫—É—Ä—å–µ—Ä–∫–µ. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –∫—É—Ä—å–µ—Ä—Å—Ç–≤–µ, –≤–µ—Ä–Ω–∏: '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å—Ç–≤–∞.' –û—Ç–≤–µ—á–∞–π –ù–ï –ë–û–õ–ï–ï 1000-1200 —Å–∏–º–≤–æ–ª–æ–≤! –í–æ–ø—Ä–æ—Å —é–∑–µ—Ä–∞:",
            "–¢—ã - –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ç–≥ –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –∫—É—Ä—å–µ—Ä–∞–º –≤ –ë–∏—à–∫–µ–∫–µ. –¢—ã –º–µ—Ö–∞–Ω–∏–∫ –≤–æ –≤—Å–µ—Ö –≤–∏–¥–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –ü–æ–º–æ–≥–∏ –ø–æ –º–∞–∫—Å–∏–º—É–º—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–∫–∏ - –¥–∞–π –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ç–æ–Ω–∫–æ—Å—Ç–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –∫—É—Ä—å–µ—Ä—Å—Ç–≤–µ, –≤–µ—Ä–Ω–∏: '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å—Ç–≤–∞.' –û—Ç–≤–µ—á–∞–π –ù–ï –ë–û–õ–ï–ï 1000-1200 —Å–∏–º–≤–æ–ª–æ–≤! –í–æ–ø—Ä–æ—Å —é–∑–µ—Ä–∞:"
        ]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.max_questions_per_day = 6
        self.max_characters_per_prompt = 120
        self.questions_today = 0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API-–∫–ª—é—á–∞
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
            raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def get_advice(self, user_question, selected_topic):
        if self.questions_today >= self.max_questions_per_day:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. 6 –≤ —Å—É—Ç–∫–∏."

        if len(user_question) > self.max_characters_per_prompt:
            return "–í–æ–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (120)."

        # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–ø–∏–∫–∞.
        if selected_topic == "legal":
            prompt_template = self.prompts[1]  # –ü–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
        elif selected_topic == "nutrition":
            prompt_template = self.prompts[2]  # –í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω
        elif selected_topic == "vehicle":
            prompt_template = self.prompts[3]  # –¢—Ä–µ—Ç–∏–π —à–∞–±–ª–æ–Ω
        elif selected_topic == "optimization":
            prompt_template = self.prompts[0]  # –ù—É–ª–µ–≤–æ–π —à–∞–±–ª–æ–Ω
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫."

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        full_prompt = f"{prompt_template}\n–í–æ–ø—Ä–æ—Å: {user_question}"

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞ –æ—Ç Gemini
        try:
            response = requests.post(
                f'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
                headers={
                    'Content-Type': 'application/json',
                    'x-goog-api-key': self.api_key
                },
                json={
                    "contents": [{
                        "parts": [{
                            "text": full_prompt
                        }]
                    }]
                }
            )
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
            self.questions_today += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            
            response_data = response.json()
            if 'candidates' not in response_data or not response_data['candidates']:
                logger.warning("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç candidates")
                return '–°–æ–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                
            advice = response_data['candidates'][0]['content']['parts'][0]['text']
            
            if not advice:
                logger.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
                return '–°–æ–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {advice}")
            return advice
            
        except requests.exceptions.HTTPError as http_err:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {http_err}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞."
        
# Callbacks, waiting for advice question state.
@router.callback_query(F.data == "ai_advice")
async def process_ai_advice(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–ò —Å–æ–≤–µ—Ç—ã
    """
    try:
        await callback.message.edit_text(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç:",
            reply_markup=get_ai_advice_topics_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ai_advice: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.in_(["legal", "nutrition", "vehicle", "optimization"]))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –ò–ò —Å–æ–≤–µ—Ç–∞
    """
    try:
        topic = callback.data
        topic_names = {
            "legal": "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
            "nutrition": "–ø–∏—Ç–∞–Ω–∏–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
            "vehicle": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "optimization": "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
        }
        
        await state.update_data(selected_topic=topic)
        await state.set_state(AIAdviceStates.waiting_for_advice_question)
        
        await callback.message.edit_text(
            f"üìù –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{topic_names[topic]}':",
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topic_selection: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(AIAdviceStates.waiting_for_advice_question)
async def process_advice_question(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        selected_topic = user_data.get('selected_topic')
        
        if not selected_topic:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return
        
        advice_handler = AIAdviceHandler()
        advice = await advice_handler.get_advice(message.text, selected_topic)
        
        if not advice:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
            
        await message.answer(advice)
        await state.clear()
        
        await message.answer(
            "ü§ñ –•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å? –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
            reply_markup=get_ai_advice_topics_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_advice_question: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()