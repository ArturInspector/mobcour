import logging
from typing import Any
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from keyboards.inline import (
    get_main_menu_keyboard,
    get_service_keyboard,
    get_back_keyboard,
    get_ai_advice_topics_keyboard
)
from database import Database
from .states import SessionStates, AIAdviceStates

# Main buttons handler right here.
logger = logging.getLogger(__name__)

# Router and database.
router = Router()
db = Database()


@router.callback_query(F.data == "ai_advice")
async def ai_advice_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–ò —Å–æ–≤–µ—Ç—ã".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —Ç–µ–º–∞–º–∏ –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤.
    """
    try:
        await state.set_state(AIAdviceStates.waiting_for_advice_topic)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ò–ò —Å–æ–≤–µ—Ç–æ–≤:",
            reply_markup=get_ai_advice_topics_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–º –ò–ò —Å–æ–≤–µ—Ç–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data.in_({"legal", "nutrition", "vehicle", "optimization"}))
async def handle_advice_topic(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –ò–ò —Å–æ–≤–µ—Ç–æ–≤.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å.
    """
    try:
        selected_topic = callback.data
        await state.update_data(selected_topic=selected_topic)
        await state.set_state(AIAdviceStates.waiting_for_advice_question)
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ:",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data == "add_session")
async def add_session(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã.
    """
    try:
        await state.set_state(SessionStates.waiting_for_session_data)
        await state.update_data(menu_message_id=callback.message.message_id)
        
        await callback.message.edit_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "05.02.2007 (–¥–∞—Ç–∞)\n"
            "16:40 (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)\n"
            "18:21 (–≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)\n"
            "2 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤)\n"
            "454 (–∑–∞—Ä–∞–±–æ—Ç–æ–∫)",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data.startswith("service_"))
async def handle_service_selection(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        service_map = {
            "service_yandex_express": ("–Ø–Ω–¥–µ–∫—Å –≠–∫—Å–ø—Ä–µ—Å—Å", "yandex_express"),
            "service_yandex_food": ("–Ø–Ω–¥–µ–∫—Å –ï–¥–∞", "yandex_food"),
            "service_glovo": ("–ì–ª–æ–≤–æ", "glovo")
        }
        
        selected_service_info = service_map.get(callback.data)
        if not selected_service_info:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        
        selected_service_name, selected_service_key = selected_service_info
        
        user_id = callback.from_user.id
        username = callback.from_user.username
        user = db.get_or_create_user(user_id, username=username)
        db.update_user_service(user_id, selected_service_key)
        
        await callback.message.edit_text(
            f"‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_service_name}",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–∏—Å–∞",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username
        user = db.get_or_create_user(user_id, username=username)
        
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=get_back_keyboard()
            )
            return
            
        stats = db.get_user_statistics(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if not stats:
            await callback.message.edit_text(
                "üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                parse_mode="Markdown"
            )
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        def safe_get(key: str, default: Any = 0) -> Any:
            value = stats.get(key)
            return default if value is None else value
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        total_shifts = safe_get('total_shifts')
        total_earnings = safe_get('total_earnings')
        total_orders = safe_get('total_orders')
        avg_earnings = safe_get('avg_earnings')
        avg_orders = safe_get('avg_orders')
        max_earnings = safe_get('max_earnings')
        min_earnings = safe_get('min_earnings')
        total_hours = safe_get('total_hours')
        avg_shift_duration = safe_get('avg_shift_duration')
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ earnings_per_hour —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–æ–ª—å
        earnings_per_hour = 0
        if total_hours > 0:
            earnings_per_hour = total_earnings / total_hours
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ {callback.from_user.first_name}*\n\n"
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º–µ–Ω—ã
        if total_shifts > 0:
            profile_text += (
                f"üìä *–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"‚Ä¢ üî¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {total_shifts}\n"
                f"‚Ä¢ üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earnings}–°\n"
                f"‚Ä¢ üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
                
                f"‚è± *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
                f"‚Ä¢ üïí –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours:.1f} —á\n"
                f"‚Ä¢ ‚è≥ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã: {avg_shift_duration:.1f} —á\n"
                f"‚Ä¢ üí∏ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å: {earnings_per_hour:.0f}—Å\n\n"
                
                f"üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                f"‚Ä¢ üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–º–µ–Ω—É: {avg_earnings:.0f}—Å\n"
                f"‚Ä¢ üìä –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–º–µ–Ω—É: {avg_orders:.1f}\n"
                f"‚Ä¢ üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {max_earnings}—Å\n"
                f"‚Ä¢ üîª –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {min_earnings}—Å\n"
            )
        else:
            profile_text += (
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = get_back_keyboard()
        
        await callback.message.edit_text(profile_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    try:
        if state is not None:
            await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_main_menu_keyboard()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback.answer()
